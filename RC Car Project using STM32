/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "..\\..\\..\\Lib\\MyLib.c"

void myDelay(int us)  // us : microsecond
{
   volatile int t1 = htim5.Instance->CNT;
   while(htim5.Instance->CNT - t1 > us);
}

char buf1 = 'A', buf_d;  // UART1 Input char / buffer
int buf_s;
uint8_t temp;
uint8_t temp2 = 112;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  //Terminal Input Interrupt
{
	if (huart == &huart6)
	{
		if(temp <= 100) buf_s = temp;
		else if ((temp == 101) && (buf1 == 'P'))
		{
			buf_d = 'G';
		}

		else if ((temp == 104) && (buf1 == 'P'))
		{
			buf_d = 'R';
		}

		else if ((temp == 103) && (buf1 == 'P'))
		{
			buf_d = 'L';
		}
		else if ((temp == 102) && (buf1 == 'P'))
		{
			buf_d = 'B';
		}

		else if ((temp == 105) && (buf1 == 'P'))
		{
			buf_d = 'S';
		}

		else if (temp == 106)
		{
			buf1 = 'P';
		}

		else if (temp == 107)
		{
			buf1 = 'A';
		}
	}
	HAL_UART_Receive_IT(&huart6, &temp, sizeof(temp));
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM5_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_USART1_UART_Init();
  MX_USART6_UART_Init();
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim5);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);


  HAL_UART_Receive_IT(&huart6, &temp, sizeof(temp));

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM3->ARR = 638;
  while (1)
  {
	  if(HAL_GPIO_ReadPin(Mag_GPIO_Port, Mag_Pin) == 1){
		  buf1 = 'P';
		  htim1.Instance->CCR1 = 0;
		  htim1.Instance->CCR4 = 0;
		  TIM3->CCR4 = 200;
		  HAL_Delay(500);
		  HAL_UART_Transmit(&huart6, &temp2, sizeof(temp2), 10);
	  }
	  else {
		  TIM3->CCR4 = TIM3->ARR;
	  } // Magnetic Sensor
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//------------------------------------------------------------------
    	 HAL_GPIO_WritePin(Trig_F_GPIO_Port, Trig_F_Pin, 0);  myDelay(20);
    	 HAL_GPIO_WritePin(Trig_F_GPIO_Port, Trig_F_Pin, 1);  myDelay(10);
    	 HAL_GPIO_WritePin(Trig_F_GPIO_Port, Trig_F_Pin, 0);  myDelay(200);
		 while(HAL_GPIO_ReadPin(Echo_F_GPIO_Port, Echo_F_Pin) == 0);  // 0 ----> 1
		 volatile int t1_F = htim5.Instance->CNT;

		 while(HAL_GPIO_ReadPin(Echo_F_GPIO_Port, Echo_F_Pin) == 1);  // 1 ----> 0
		 volatile int t2_F = htim5.Instance->CNT;

		 int tt_F = t2_F - t1_F;
		 double dist_F = (340.0 / 2000000.) * tt_F;

//    	 int m_F = dist_F;
//    	 int cm_F = dist_F * 100;
//    	 int cm1_F = cm_F - m_F * 100;
//------------------------------------------------------------------
		 HAL_GPIO_WritePin(Trig_R_GPIO_Port, Trig_R_Pin, 0);  myDelay(20);
		 HAL_GPIO_WritePin(Trig_R_GPIO_Port, Trig_R_Pin, 1);  myDelay(10);
		 HAL_GPIO_WritePin(Trig_R_GPIO_Port, Trig_R_Pin, 0);  myDelay(200);
		 while(HAL_GPIO_ReadPin(Echo_R_GPIO_Port, Echo_R_Pin) == 0);  // 0 ----> 1
		 volatile int t1_R = htim5.Instance->CNT;

		 while(HAL_GPIO_ReadPin(Echo_R_GPIO_Port, Echo_R_Pin) == 1);  // 1 ----> 0
		 volatile int t2_R = htim5.Instance->CNT;

		 int tt_R = t2_R - t1_R;
		 double dist_R = (340.0 / 2000000.) * tt_R;
//------------------------------------------------------------------
		 HAL_GPIO_WritePin(Trig_L_GPIO_Port, Trig_L_Pin, 0);  myDelay(20);
		 HAL_GPIO_WritePin(Trig_L_GPIO_Port, Trig_L_Pin, 1);  myDelay(10);
		 HAL_GPIO_WritePin(Trig_L_GPIO_Port, Trig_L_Pin, 0);  myDelay(200);
		 while(HAL_GPIO_ReadPin(Echo_L_GPIO_Port, Echo_L_Pin) == 0);  // 0 ----> 1
		 volatile int t1_L = htim5.Instance->CNT;

		 while(HAL_GPIO_ReadPin(Echo_L_GPIO_Port, Echo_L_Pin) == 1);  // 1 ----> 0
		 volatile int t2_L = htim5.Instance->CNT;

		 int tt_L = t2_L - t1_L;
		 double dist_L = (340.0 / 2000000.) * tt_L;
//------------------------------------------------------------------
		 myDelay(10);
         printf("\033[11;10H");
         printf(" |---------------------------------------------|\r\n");
         printf("\033[12;23H");
         printf("Distance_F : %.2f\r\n", dist_F);
         printf("\033[13;23H");
         printf("Distance_R : %.2f\r\n", dist_R);
         printf("\033[14;23H");
         printf("Distance_L : %.2f\r\n", dist_L);
         printf("\033[15;10H");
         printf(" |---------------------------------------------|\r\n");




		  if(buf1 == 'A'){
			  double N = 0.25;
			  int PWM = (PWM > 999) ? 999 : 600 * N / dist_F;

			  if(dist_R < 0.07){
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
				  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
				  HAL_GPIO_WritePin(LEDL_GPIO_Port, LEDL_Pin, 1);
				  htim1.Instance->CCR1 = 600 + 399 * buf_s / 100;
				  htim1.Instance->CCR4 = 600 + 399 * buf_s / 100;
			  }
			  else if(dist_L < 0.07){
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
				  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
				  HAL_GPIO_WritePin(LEDL_GPIO_Port, LEDL_Pin, 0);
				  htim1.Instance->CCR1 = 600 + 399 * buf_s / 100;
				  htim1.Instance->CCR4 = 600 + 399 * buf_s / 100;
			  }
			  else if(dist_F > 0.5){
				  TIM3->CCR4 = TIM3->ARR;
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
				  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
				  HAL_GPIO_WritePin(LEDL_GPIO_Port, LEDL_Pin, 0);
				  htim1.Instance->CCR1 = 600 + 399 * buf_s / 100;
				  htim1.Instance->CCR4 = 600 + 399 * buf_s / 100;
			  }


			  else if(dist_F > N){
				  TIM3->CCR4 = TIM3->ARR;
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
				  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
				  HAL_GPIO_WritePin(LEDL_GPIO_Port, LEDL_Pin, 0);
				  htim1.Instance->CCR1 = (400 + 399 * buf_s / 100) + 300 * dist_F;
				  htim1.Instance->CCR4 = (400 + 399 * buf_s / 100) + 300 * dist_F;
			  }
			  else if((dist_R < 0.05) && (dist_L < 0.05) && (dist_F < 0.1)){
					  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
					  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
					  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
					  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
					  htim1.Instance->CCR1 = 800;
					  htim1.Instance->CCR4 = 800;
					  HAL_Delay(1200);
					  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
					  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
					  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
					  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
					  htim1.Instance->CCR1 = 800;
					  htim1.Instance->CCR4 = 800;
					  HAL_Delay(800);
				  }
			  else if(dist_F <= N){
				  if(dist_R > dist_L){
					  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
					  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
					  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
					  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
					  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
					  HAL_GPIO_WritePin(LEDL_GPIO_Port, LEDL_Pin, 0);
					  htim1.Instance->CCR1 = PWM;
					  htim1.Instance->CCR4 = PWM;
					  HAL_Delay(500);
				  }
				  else{
					  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
					  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
					  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
					  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
					  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
					  HAL_GPIO_WritePin(LEDL_GPIO_Port, LEDL_Pin, 1);
					  htim1.Instance->CCR1 = PWM;
					  htim1.Instance->CCR4 = PWM;
					  HAL_Delay(500);
				  }
			  }
		  }
		  else if(buf1 == 'P'){
			  htim1.Instance->CCR1 = 0;
			  htim1.Instance->CCR4 = 0;
			  if(buf_d == 'G'){
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
				  htim1.Instance->CCR1 = 600 + 399 * buf_s / 100;
				  htim1.Instance->CCR4 = 600 + 399 * buf_s / 100;
			  }
			  else if(buf_d == 'R'){
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
				  htim1.Instance->CCR1 = 600 + 399 * buf_s / 100;
				  htim1.Instance->CCR4 = 600 + 399 * buf_s / 100;
			  }
			  else if(buf_d == 'L'){
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
				  htim1.Instance->CCR1 = 600 + 399 * buf_s / 100;
				  htim1.Instance->CCR4 = 600 + 399 * buf_s / 100;
			  }
			  else if(buf_d == 'B'){
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
				  htim1.Instance->CCR1 = 600 + 399 * buf_s / 100;
				  htim1.Instance->CCR4 = 600 + 399 * buf_s / 100;
			  }
			  else if(buf_d == 'S'){
				  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
				  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
				  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
				  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
				  htim1.Instance->CCR1 = 0;
				  htim1.Instance->CCR4 = 0;
			  }
		  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 83;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 83;
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
  htim3.Init.Period = 999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 83;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 4294967295;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 9600;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_L_Pin|LD2_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Trig_F_Pin|Trig_R_Pin|IN2_Pin|LEDR_Pin
                          |LEDL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Echo_L_Pin */
  GPIO_InitStruct.Pin = Echo_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Echo_L_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Trig_L_Pin LD2_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = Trig_L_Pin|LD2_Pin|IN4_Pin|IN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : Mag_Pin Echo_R_Pin Echo_F_Pin */
  GPIO_InitStruct.Pin = Mag_Pin|Echo_R_Pin|Echo_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Trig_F_Pin Trig_R_Pin IN2_Pin LEDR_Pin
                           LEDL_Pin */
  GPIO_InitStruct.Pin = Trig_F_Pin|Trig_R_Pin|IN2_Pin|LEDR_Pin
                          |LEDL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
